@startuml 
title BookApi

left to right direction

package Entities
{
    class Book{
    +id
    +title
    +price
    }
}

package Entities.DTOs
{
    abstract class BookDto
    {
        +title:String
        +price:Decimal
    }
    class BookDtoForInsertion
    {
        
    }
    class BookDtoForUpdate
    {

    }
}

package Entities.Exceptions
{
    abstract class NotFoundException {
        +NotFoundException(message: String)
    }

    class BookNotFoundException {
        +BookNotFoundException(id: int)
    }
}





package Repositories
{
    class RepositoryContext   {
        +Books:DbSet<Book>
        +RepositoryContext(options:DbContextOptions)
        +OnModelCreating(modelBuilder:ModelBuilder)
    }
    class BookRepository {
        -context:RepositoryContext
        +Get(id):Book?
        +GetAll():List<Book>
        +Add(item:Book)
        +Remove(item:Book)
        +Update(item:Book)
    }
}

package Services
{
    class BookService
    {
        -bookList:List<Book>
        --
        +Count:int
        --
        +GetBooks():List<Book>
        +GetBookById(int:i):Book
        +AddBook(item:Book)
        +UpdateBook(id:int, item:Book)
        +DeleteBook(id:int)
        
    }
    class BookServiceV2
    {
        -context:RepositoryContext
        --
        +Count:int
        --
        +GetBooks():List<Book>
        +GetBookById(int:i):Book
        +AddBook(item:Book)
        +UpdateBook(id:int, item:Book)
        +DeleteBook(id:int)
        
    }
    class BookServiceV3
    {
        -context:BookRepository
        --
        +Count:int
        --
        +GetBooks():List<Book>
        +GetBookById(int:i):Book
        +AddBook(item:Book)
        +UpdateBook(id:int, item:Book)
        +DeleteBook(id:int)
    }
}


package Abstracts
{
    interface IBookService
    {
        +Count:int
        +GetBooks():List<Book>
        +GetBookById(id:int):Book
        +AddBook(item:BookDtoForInsertion):Book
        +UpdateBook(id:int, item:Book):Book
        +DeleteBook(id:int):void
    }
}

package Configuration {
    class MappingProfile {
        
    }
    class ConfigurationExtensions {
        {static} +ValidateIdRange(int id): void
        {static} +UseCustomExceptionHandler(IApplicationBuilder app): void
        {static} +AddCustomCors(services:IServiceCollection): IServiceCollection
        {static} +AddCustomSwagger(services:IServiceCollection): IServiceCollection
    }
}

MappingProfile -right-|> Profile : "<<extends>>"

BookService .up.|> IBookService : "<<implements>>"
BookServiceV2 .up.|> IBookService : "<<implements>>"
BookServiceV3 .up.|> IBookService : "<<implements>>"

BookNotFoundException -right-|> NotFoundException : "<<extends>>"

RepositoryContext -right-|> DbContext : "<<extends>>"

BookDtoForUpdate -left-|> BookDto : "<<extends>>"
BookDtoForInsertion -right-|> BookDto : "<<extends>>"

hide empty members